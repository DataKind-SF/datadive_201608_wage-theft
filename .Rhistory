str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = c()
for(col in colnames(df)){
if(is.factor(df[,col])){
for(lev in 1:length(levels(df[,col]))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(col, levels(df[,col])[lev], sep = "_")))
print(c(check_col, lev))
temp_vector = check_col == lev
print(temp_vector)
binaryList = c(binaryList, temp_vector)
}
print(binaryList)
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
for(col in colnames(df)){
if(is.factor(df[,col])){
for(lev in 1:length(levels(df[,col]))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(col, levels(df[,col])[lev], sep = "_")))
print(c(check_col, lev))
temp_vector = check_col == lev
print(temp_vector)
binaryList = c(binaryList, temp_vector)
}
print(binaryList)
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
for(col in colnames(df)){
if(is.factor(df[,col])){
for(lev in 1:length(levels(df[,col]))){
print(c("lev =", lev))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(col, levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
print(temp_vector)
binaryList = c(binaryList, temp_vector)
}
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:length(levels(df[,col]))){
print(c("lev =", lev))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(col, levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
print(temp_vector)
binaryList = c(binaryList, temp_vector)
}
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:length(levels(df[,col]))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(col, levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:length(levels(df[,col]))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
factormt = df_five_factor(mtcars)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:length(levels(df[,col]))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
print(names(df))
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
binaryList = df(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
}
binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
View(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = list()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
print(c("lev =", lev, "name = ", (paste(col, levels(df[,col])[lev], sep = "_"))))
temp_vector = check_col == lev
binaryList = c(binaryList, temp_vector)
print(c("count", count))
}
binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
binary_indicator = function(df){
namesv=c()
count=0
binaryList = data.frame()
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
print(c("count", count))
}
#binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
col = "cyl"
levels(df[,col])
names(df)
naems(factormt)
names(factormt)
col = 2
temp_vector = c()
check_col = as.numeric(df[,col])
df = factormt
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
namesv = c()
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
levels(df[,col])
temp_vector = check_col == lev
lev = 4
lev = "4"
temp_vector = check_col == lev
temp_vector
check_col
lev = 1
temp_vector = check_col == lev
temp_vector
print(c("count", count))
binaryList = cbind(binaryList, temp_vector)
print(c("count", count))
print(summary(binaryList))
namesv=c()
count=0
binaryList = data.frame()
col_numb = length(colnames(df))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
namesv=c()
count=0
binaryList = data.frame()
col_numb = length(colnames(df))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
binaryList = data.frame()
namesv=c()
count=0
binaryList = data.frame()
binaryList[1:nrow(df),] = 0
col_numb = length(colnames(df))
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
list[[col]] =
3
binaryList = cbind(binaryList, temp_vector)
binaryList
binary_indicator = function(df){
namesv=c()
count=0
binaryList = data.frame()
binaryList[1:nrow(df),] = 0
col_numb = length(colnames(df))
for(col in 1:col_numb){
if(is.factor(df[,col])){
for(lev in 1:(length(levels(df[,col])))){
temp_vector = c()
check_col = as.numeric(df[,col])
temp_level = levels(df[,col])[1]
count=count+1
namesv = c(namesv,(paste(names(df)[col], levels(df[,col])[lev], sep = "_")))
temp_vector = check_col == lev
binaryList = cbind(binaryList, temp_vector)
print(c("count", count))
}
#binaryList = data.frame(binaryList[1:count])
print(summary(binaryList))
names(binaryList) = namesv
df = cbind(df, binaryList)
return(df)
}
bi = binary_indicator(factormt)
str(bi)
source('~/Documents/Dropbox/Stats Programming/Signal Data Science Nathan/week2 day2 resampling.R', echo=TRUE)
start = proc.time()
# Permutation generation (naive) solution
perm_naive = function(n) {
if (n == 1) {
return(list(1))
}
smaller = perm_naive(n-1)
perms = vector("list", length(smaller) * n)
pos = 0
for (i in 1:length(smaller)) {
old = smaller[[i]]
for (j in 1:(n-1)) {
pos = pos + 1
if (j < (n-1)) {
perms[[pos]] = c(old[1:j], n, old[(j+1):(n-1)])
} else {
perms[[pos]] = c(old, n)
}
pos = pos + 1
perms[[pos]] = c(n, old)
}
unique(perms)
}
perm_naive(4)
done = proc.time() - start
print(done)
perm_naive(8)
done = proc.time() - start
print(done)
scrape_zillow = read.csv("/Users/nathanhelm-burger/herokufolder/flask\ tutorial/scrape_zillow.csv")
df = scrape_zillow
dim(df)
changetoNA <- function(colnum,df) {
col <- df[,colnum]
if (is.numeric(col)) {  #edit: verifying column is numeric
col[col < 0 & is.numeric(col)] <- NA
}
return(col)
}
df <- data.frame(sapply(1:5, changetoNA, df))
df = cbind(df, scrape_zillow$url)
names(df) = names(scrape_zillow)
df$ppft[df$ppft>500000] = NA
boxplot(df$ppft)
summary(df)
View(df)
library("tm")
library("qdap")
df = read.csv("wikipedia_machinelearning_scrape.txt",
header = FALSE, stringsAsFactors = FALSE)
setwd("~/Documents/Dropbox/Stats Programming/Signal Data Science Nathan")
df = read.csv("wikipedia_machinelearning_scrape.txt",
header = FALSE, stringsAsFactors = FALSE)
dim(df)
df[1,1]
df_cleaner = sapply(df, add_incomplete)
View(df_cleaner)
dim(df_cleaner)
df_cleaner2 = sapply(df_cleaner, enc2utf8)
dim(df_cleaner2)
df_cleaner2
dim(df_cleaner2)
str(df_cleaner2)
str(df_cleaner)
changetoNA <- function(colnum,df, to_replace) {
col <- df[,colnum]
if (is.numeric(col)) {  #edit: verifying column is numeric
col[col == to_replace & is.numeric(col)] <- NA
}
return(col)
}
df_cleaner2 <- data.frame(sapply(1:5, changetoNA, df_cleaner, "|"))
changetoNA <- function(colnum,df, to_replace) {
col <- df[,colnum]
col[col == to_replace] <- NA
return(col)
}
df_cleaner2 <- data.frame(sapply(1:5, changetoNA, df_cleaner, "|"))
dim(df_cleaner2)
View(df_cleaner2)
df_cleaner2 <- data.frame(sapply(1:ncol(df_cleaner), changetoNA, df_cleaner, "|"))
dim(df_cleaner2)
df = read.csv(untar("data/processedWhdData/whd_whisard.naicNumericLevels.csv.zip"))
setwd("~/Documents/Signal Data Science Nathan/Wage theft stats/datadive_201608_wage-theft")
df = read.csv(untar("data/processedWhdData/whd_whisard.naicNumericLevels.csv.zip"))
?untar
df = read.csv("~/Downloads/whd_whisard.naicNumericLevels.csv.zip")
df = read.csv("~/Downloads/whd_whisard.naicNumericLevels.csv")
colnames(df)
df_subset = df[c(1:10, 12, 111:116)]
summary(df_subset)
df_byNaic3 = group_by(df_subset, naic_cd_lvl3)
library("dplyr")
df_byNaic3 = group_by(df_subset, naic_cd_lvl3)
colnames(df)
df_subset = df[c(1:10, 12:14, 111:116)]
sum_df_byNaic3 = summarize(df_byNaic3, industries=n(bw_atp_amt), total_bw=sum(bw_atp_amt), bw_per_emp=sum(bw_atp_amt/ee_atp_cnt), avg_bw=mean(bw_atp_amt))
sum_df_byNaic3 = summarize(df_byNaic3, industries=n(), total_industry_bw=sum(bw_atp_amt),avg_industry_bw=mean(bw_atp_amt), bw_per_emp=sum(bw_atp_amt/ee_atp_cnt))
attach(df_byNaic3)
sum_df_byNaic3 = summarize(df_byNaic3, industries=n(), total_industry_bw=sum(bw_atp_amt),avg_industry_bw=mean(bw_atp_amt), bw_per_emp=sum(bw_atp_amt/ee_atp_cnt))
sum_df_byNaic3 = summarize(df_byNaic3, industries=n(), total_industry_bw=sum(df_byNaic3['bw_atp_amt']),avg_industry_bw=mean(df_byNaic3['bw_atp_amt']), bw_per_emp=sum(df_byNaic3['bw_atp_amt'/'ee_atp_cnt']))
df_byNaic3
df_byNaic3 = group_by(df_subset, naic_cd_lvl3)
sum_df_byNaic3 = summarize(df_byNaic3, industries=n(), total_industry_bw=sum(df_byNaic3['bw_atp_amt']),avg_industry_bw=mean(df_byNaic3['bw_atp_amt']), bw_per_emp=sum(df_byNaic3['bw_atp_amt'/'ee_atp_cnt']))
sum_df_byNaic3
sum_df_byNaic3 = summarize(df_byNaic3, industries=n(), total_industry_bw=sum(df_byNaic3['bw_atp_amt']),avg_industry_bw=mean(df_byNaic3['bw_atp_amt']), bw_per_emp=sum(df_byNaic3['bw_atp_amt']/df_byNaic3['ee_atp_cnt']))
sum_df_byNaic3
?mean
sum_df_byNaic3 = summarize(df_byNaic3, industries=n(), total_industry_bw=sum(df_byNaic3['bw_atp_amt'], na.rm = TRUE),avg_industry_bw=mean(df_byNaic3['bw_atp_amt'], na.rm = TRUE), bw_per_emp=sum(df_byNaic3['bw_atp_amt'])/sum(df_byNaic3['ee_atp_cnt']))
warnings()
sum_df_byNaic3
typeof(df_byNaic3$bw_atp_amt)
